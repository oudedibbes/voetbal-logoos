{"version":3,"sources":["app.js"],"names":["window","document","lastTime","vendors","x","length","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","querySelectorAll","body_content","querySelector","header","nav_content","threshold","getBoundingClientRect","addEventListener","scrollY","top","classList","add","remove","csSelector","csInput","csList","csOptions","csStatus","aOptions","Array","from","csState","toggleList","whichWay","setAttribute","findFocus","activeElement","moveFocus","fromHere","toThere","aCurrentOptions","filter","option","style","display","focus","currentItem","whichOne","indexOf","doFilter","terms","value","aFilteredOptions","innerText","toUpperCase","startsWith","howMany","forEach","setState","textContent","makeChoice","whichOption","optionTitle","newState","e","currentFocus","tagName","navigation","nextElementSibling","scrollIntoView","block","behavior","whichKey","doKeyAction","key","target","closest","visible","invisible","theme","localStorage","getItem","documentElement","userPrefers","getComputedStyle","getPropertyValue","modeSwitcher","getAttribute","setItem","getElementById","innerHTML"],"mappings":"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","file":"app.min.js","sourcesContent":["'use strict'\n;(function (window, document) {\n\t;(function () {\n\t\tvar lastTime = 0\n\t\tvar vendors = ['ms', 'moz', 'webkit', 'o']\n\t\tfor (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame']\n\t\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame']\n\t\t}\n\n\t\tif (!window.requestAnimationFrame)\n\t\t\twindow.requestAnimationFrame = function (callback, element) {\n\t\t\t\tvar currTime = new Date().getTime()\n\t\t\t\tvar timeToCall = Math.max(0, 16 - (currTime - lastTime))\n\t\t\t\tvar id = window.setTimeout(function () {\n\t\t\t\t\tcallback(currTime + timeToCall)\n\t\t\t\t}, timeToCall)\n\t\t\t\tlastTime = currTime + timeToCall\n\t\t\t\treturn id\n\t\t\t}\n\n\t\tif (!window.cancelAnimationFrame)\n\t\t\twindow.cancelAnimationFrame = function (id) {\n\t\t\t\tclearTimeout(id)\n\t\t\t}\n\t})()\n\n\tconst elements = document.querySelectorAll('.sticky-content')\n\t//Stickyfill.add(elements)\n\n\tconst body_content = document.querySelector('.site-content')\n\tconst header = document.querySelector('header')\n\tconst nav_content = document.querySelector('.navigation')\n\tif (\n\t\ttypeof body_content != 'undefined' &&\n\t\tbody_content != null &&\n\t\ttypeof header != 'undefined' &&\n\t\theader != null &&\n\t\ttypeof nav_content != 'undefined' &&\n\t\tnav_content != null\n\t) {\n\t\tconst threshold = nav_content.getBoundingClientRect()\n\n\t\twindow.addEventListener('scroll', function () {\n\t\t\tif (window.scrollY >= threshold.top) {\n\t\t\t\t//header.classList.add('header--fixed');\n\t\t\t\tnav_content.classList.add('--fixed')\n\t\t\t} else {\n\t\t\t\t//header.classList.remove('header--fixed');\n\t\t\t\tnav_content.classList.remove('--fixed')\n\t\t\t}\n\t\t})\n\t}\n\n\tfunction scrollToHalf(duration) {\n\t\tvar heightDiff = document.body.scrollHeight - window.innerHeight,\n\t\t\tendValue = heightDiff / 2,\n\t\t\tstart = null\n\n\t\t/* Set a default for the duration, in case it's not given. */\n\t\tduration = duration || 300\n\n\t\t/* Start the animation. */\n\t\twindow.requestAnimationFrame(function step(now) {\n\t\t\t/* Normalise the start date and calculate the current progress. */\n\t\t\tstart = !start ? now : start\n\t\t\tvar progress = now - start\n\n\t\t\t/* Increment by a calculate step the value of the scroll top. */\n\t\t\tdocument.documentElement.scrollTop = (endValue * progress) / duration\n\t\t\tdocument.body.scrollTop = (endValue * progress) / duration\n\n\t\t\t/* Check whether the current progress is less than the given duration. */\n\t\t\tif (progress < duration) {\n\t\t\t\t/* Execute the function recursively. */\n\t\t\t\twindow.requestAnimationFrame(step)\n\t\t\t} else {\n\t\t\t\t/* Set the scroll top to the end value. */\n\t\t\t\tdocument.documentElement.scrollTop = endValue\n\t\t\t\tdocument.body.scrollTop = endValue\n\t\t\t}\n\t\t})\n\t}\n\n\tfunction scrollToSection(element) {\n\t\t/* Scroll until the button's next sibling comes into view. */\n\t\telement.nextElementSibling.scrollIntoView({ block: 'start', behavior: 'smooth' })\n\t}\n\n\t// SETUP\n\t// /////////////////////////////////\n\t// assign names to things we'll need to use more than once\n\tconst csScroll = nav_content.getBoundingClientRect()\n\tconst csSelector = document.querySelector('#myCustomSelect') // the input, svg and ul as a group\n\tconst csInput = csSelector.querySelector('input')\n\tconst csList = csSelector.querySelector('ul')\n\tconst csOptions = csList.querySelectorAll('li')\n\tconst csIcons = csSelector.querySelectorAll('svg')\n\tconst csStatus = document.querySelector('#custom-select-status')\n\tconst aOptions = Array.from(csOptions)\n\n\t// when JS is loaded, set up our starting point\n\t// if JS fails to load, the custom select remains a plain text input\n\t// create and set start point for the state tracker\n\tlet csState = 'initial'\n\t// inform assistive tech (screen readers) of the names & roles of the elements in our group\n\tcsSelector.setAttribute('role', 'combobox')\n\tcsSelector.setAttribute('aria-haspopup', 'listbox')\n\tcsSelector.setAttribute('aria-owns', 'custom-select-list') // container owns the list...\n\tcsInput.setAttribute('aria-autocomplete', 'both')\n\tcsInput.setAttribute('aria-controls', 'custom-select-list') // ...but the input controls it\n\tcsList.setAttribute('role', 'listbox')\n\tcsOptions.forEach(function (option) {\n\t\toption.setAttribute('role', 'option')\n\t\toption.setAttribute('tabindex', '-1') // make li elements keyboard focusable by script only\n\t})\n\t// set up a message to keep screen reader users informed of what the custom input is for/doing\n\tcsStatus.textContent = csOptions.length + ' options available. Arrow down to browse or start typing to filter.'\n\n\t// EVENTS\n\t// /////////////////////////////////\n\tcsSelector.addEventListener('click', function (e) {\n\t\tconst currentFocus = findFocus()\n\n\t\tswitch (csState) {\n\t\t\tcase 'initial': // if state = initial, toggleOpen and set state to opened\n\t\t\t\ttoggleList('Open')\n\t\t\t\tsetState('opened')\n\t\t\t\tbreak\n\t\t\tcase 'opened':\n\t\t\t\t// if state = opened and focus on input, toggleShut and set state to initial\n\t\t\t\tif (currentFocus === csInput) {\n\t\t\t\t\ttoggleList('Shut')\n\t\t\t\t\tsetState('initial')\n\t\t\t\t} else if (currentFocus.tagName === 'LI') {\n\t\t\t\t\t// if state = opened and focus on list, makeChoice, toggleShut and set state to closed\n\t\t\t\t\tmakeChoice(currentFocus)\n\t\t\t\t\ttoggleList('Shut')\n\t\t\t\t\tsetState('closed')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'filtered':\n\t\t\t\t// if state = filtered and focus on list, makeChoice and set state to closed\n\t\t\t\tif (currentFocus.tagName === 'LI') {\n\t\t\t\t\tmakeChoice(currentFocus)\n\t\t\t\t\ttoggleList('Shut')\n\t\t\t\t\tsetState('closed')\n\t\t\t\t} // if state = filtered and focus on input, do nothing (wait for next user input)\n\n\t\t\t\tbreak\n\t\t\tcase 'closed': // if state = closed, toggleOpen and set state to filtered? or opened?\n\t\t\t\ttoggleList('Open')\n\t\t\t\tsetState('filtered')\n\t\t\t\tbreak\n\t\t}\n\n\t\tscrollToSection(navigation)\n\t})\n\n\tcsSelector.addEventListener('keyup', function (e) {\n\t\tdoKeyAction(e.key)\n\t})\n\n\tdocument.addEventListener('click', function (e) {\n\t\tif (!e.target.closest('#myCustomSelect')) {\n\t\t\t// click outside of the custom group\n\t\t\ttoggleList('Shut')\n\t\t\tsetState('initial')\n\t\t}\n\t})\n\n\t// FUNCTIONS\n\t// /////////////////////////////////\n\n\tfunction toggleList(whichWay) {\n\t\tif (whichWay === 'Open') {\n\t\t\tcsList.classList.remove('hidden-all')\n\t\t\tcsSelector.setAttribute('aria-expanded', 'true')\n\t\t} else {\n\t\t\t// === 'Shut'\n\t\t\tcsList.classList.add('hidden-all')\n\t\t\tcsSelector.setAttribute('aria-expanded', 'false')\n\t\t}\n\t}\n\n\tfunction findFocus() {\n\t\tconst focusPoint = document.activeElement\n\t\treturn focusPoint\n\t}\n\n\tfunction moveFocus(fromHere, toThere) {\n\t\t// grab the currently showing options, which might have been filtered\n\t\tconst aCurrentOptions = aOptions.filter(function (option) {\n\t\t\tif (option.style.display === '') {\n\t\t\t\treturn true\n\t\t\t}\n\t\t})\n\t\t// don't move if all options have been filtered out\n\t\tif (aCurrentOptions.length === 0) {\n\t\t\treturn\n\t\t}\n\t\tif (toThere === 'input') {\n\t\t\tcsInput.focus()\n\t\t}\n\t\t// possible start points\n\t\tswitch (fromHere) {\n\t\t\tcase csInput:\n\t\t\t\tif (toThere === 'forward') {\n\t\t\t\t\taCurrentOptions[0].focus()\n\t\t\t\t} else if (toThere === 'back') {\n\t\t\t\t\taCurrentOptions[aCurrentOptions.length - 1].focus()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase csOptions[0]:\n\t\t\t\tif (toThere === 'forward') {\n\t\t\t\t\taCurrentOptions[1].focus()\n\t\t\t\t} else if (toThere === 'back') {\n\t\t\t\t\tcsInput.focus()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase csOptions[csOptions.length - 1]:\n\t\t\t\tif (toThere === 'forward') {\n\t\t\t\t\taCurrentOptions[0].focus()\n\t\t\t\t} else if (toThere === 'back') {\n\t\t\t\t\taCurrentOptions[aCurrentOptions.length - 2].focus()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\t// middle list or filtered items\n\t\t\t\tconst currentItem = findFocus()\n\t\t\t\tconst whichOne = aCurrentOptions.indexOf(currentItem)\n\t\t\t\tif (toThere === 'forward') {\n\t\t\t\t\tconst nextOne = aCurrentOptions[whichOne + 1]\n\t\t\t\t\tnextOne.focus()\n\t\t\t\t} else if (toThere === 'back' && whichOne > 0) {\n\t\t\t\t\tconst previousOne = aCurrentOptions[whichOne - 1]\n\t\t\t\t\tpreviousOne.focus()\n\t\t\t\t} else {\n\t\t\t\t\t// if whichOne = 0\n\t\t\t\t\tcsInput.focus()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tfunction doFilter() {\n\t\tconst terms = csInput.value\n\t\tconst aFilteredOptions = aOptions.filter(function (option) {\n\t\t\tif (option.innerText.toUpperCase().startsWith(terms.toUpperCase())) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t})\n\t\tcsOptions.forEach(option => (option.style.display = 'none'))\n\t\taFilteredOptions.forEach(function (option) {\n\t\t\toption.style.display = ''\n\t\t})\n\t\tsetState('filtered')\n\t\tupdateStatus(aFilteredOptions.length)\n\t}\n\n\tfunction updateStatus(howMany) {\n\t\tcsStatus.textContent = howMany + ' options available.'\n\t}\n\n\tfunction makeChoice(whichOption) {\n\t\tconst optionTitle = whichOption.querySelector('strong')\n\t\tcsInput.value = optionTitle.textContent\n\t\tmoveFocus(document.activeElement, 'input')\n\t\t// update aria-selected, if using\n\t}\n\n\tfunction setState(newState) {\n\t\tswitch (newState) {\n\t\t\tcase 'initial':\n\t\t\t\tcsState = 'initial'\n\t\t\t\tbreak\n\t\t\tcase 'opened':\n\t\t\t\tcsState = 'opened'\n\t\t\t\tbreak\n\t\t\tcase 'filtered':\n\t\t\t\tcsState = 'filtered'\n\t\t\t\tbreak\n\t\t\tcase 'closed':\n\t\t\t\tcsState = 'closed'\n\t\t}\n\t\t// console.log({csState})\n\t}\n\n\tfunction doKeyAction(whichKey) {\n\t\tconst currentFocus = findFocus()\n\t\tswitch (whichKey) {\n\t\t\tcase 'Enter':\n\t\t\t\tif (csState === 'initial') {\n\t\t\t\t\t// if state = initial, toggleOpen and set state to opened\n\t\t\t\t\ttoggleList('Open')\n\t\t\t\t\tsetState('opened')\n\t\t\t\t} else if (csState === 'opened' && currentFocus.tagName === 'LI') {\n\t\t\t\t\t// if state = opened and focus on list, makeChoice and set state to closed\n\t\t\t\t\tmakeChoice(currentFocus)\n\t\t\t\t\ttoggleList('Shut')\n\t\t\t\t\tsetState('closed')\n\t\t\t\t} else if (csState === 'opened' && currentFocus === csInput) {\n\t\t\t\t\t// if state = opened and focus on input, close it\n\t\t\t\t\ttoggleList('Shut')\n\t\t\t\t\tsetState('closed')\n\t\t\t\t} else if (csState === 'filtered' && currentFocus.tagName === 'LI') {\n\t\t\t\t\t// if state = filtered and focus on list, makeChoice and set state to closed\n\t\t\t\t\tmakeChoice(currentFocus)\n\t\t\t\t\ttoggleList('Shut')\n\t\t\t\t\tsetState('closed')\n\t\t\t\t} else if (csState === 'filtered' && currentFocus === csInput) {\n\t\t\t\t\t// if state = filtered and focus on input, set state to opened\n\t\t\t\t\ttoggleList('Open')\n\t\t\t\t\tsetState('opened')\n\t\t\t\t} else {\n\t\t\t\t\t// i.e. csState is closed, or csState is opened/filtered but other focus point?\n\t\t\t\t\t// if state = closed, set state to filtered? i.e. open but keep existing input?\n\t\t\t\t\ttoggleList('Open')\n\t\t\t\t\tsetState('filtered')\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase 'Escape':\n\t\t\t\t// if state = initial, do nothing\n\t\t\t\t// if state = opened or filtered, set state to initial\n\t\t\t\t// if state = closed, do nothing\n\t\t\t\tif (csState === 'opened' || csState === 'filtered') {\n\t\t\t\t\ttoggleList('Shut')\n\t\t\t\t\tsetState('initial')\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase 'ArrowDown':\n\t\t\t\tif (csState === 'initial' || csState === 'closed') {\n\t\t\t\t\t// if state = initial or closed, set state to opened and moveFocus to first\n\t\t\t\t\ttoggleList('Open')\n\t\t\t\t\tmoveFocus(csInput, 'forward')\n\t\t\t\t\tsetState('opened')\n\t\t\t\t} else {\n\t\t\t\t\t// if state = opened and focus on input, moveFocus to first\n\t\t\t\t\t// if state = opened and focus on list, moveFocus to next/first\n\t\t\t\t\t// if state = filtered and focus on input, moveFocus to first\n\t\t\t\t\t// if state = filtered and focus on list, moveFocus to next/first\n\t\t\t\t\ttoggleList('Open')\n\t\t\t\t\tmoveFocus(currentFocus, 'forward')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'ArrowUp':\n\t\t\t\tif (csState === 'initial' || csState === 'closed') {\n\t\t\t\t\t// if state = initial, set state to opened and moveFocus to last\n\t\t\t\t\t// if state = closed, set state to opened and moveFocus to last\n\t\t\t\t\ttoggleList('Open')\n\t\t\t\t\tmoveFocus(csInput, 'back')\n\t\t\t\t\tsetState('opened')\n\t\t\t\t} else {\n\t\t\t\t\t// if state = opened and focus on input, moveFocus to last\n\t\t\t\t\t// if state = opened and focus on list, moveFocus to prev/last\n\t\t\t\t\t// if state = filtered and focus on input, moveFocus to last\n\t\t\t\t\t// if state = filtered and focus on list, moveFocus to prev/last\n\t\t\t\t\tmoveFocus(currentFocus, 'back')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tif (csState === 'initial') {\n\t\t\t\t\t// if state = initial, toggle open, doFilter and set state to filtered\n\t\t\t\t\ttoggleList('Open')\n\t\t\t\t\tdoFilter()\n\t\t\t\t\tsetState('filtered')\n\t\t\t\t} else if (csState === 'opened') {\n\t\t\t\t\t// if state = opened, doFilter and set state to filtered\n\t\t\t\t\tdoFilter()\n\t\t\t\t\tsetState('filtered')\n\t\t\t\t} else if (csState === 'closed') {\n\t\t\t\t\t// if state = closed, doFilter and set state to filtered\n\t\t\t\t\tdoFilter()\n\t\t\t\t\tsetState('filtered')\n\t\t\t\t} else {\n\t\t\t\t\t// already filtered\n\t\t\t\t\tdoFilter()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t}\n\t}\n})(window, document)\n\nconst visible = document.querySelector('.visible')\nconst invisible = document.querySelector('.invisible')\n\nconst theme = localStorage.getItem('theme')\nif (theme === 'dark') {\n\tdocument.documentElement.setAttribute('data-theme', 'dark')\n}\n\nconst userPrefers = getComputedStyle(document.documentElement).getPropertyValue('content')\n\nif (theme === 'dark') {\n\tdocument.getElementById('theme-toggle').innerHTML = 'Light Mode'\n} else if (theme === 'light') {\n\tdocument.getElementById('theme-toggle').innerHTML = 'Dark Mode'\n} else if (userPrefers === 'dark') {\n\tdocument.documentElement.setAttribute('data-theme', 'dark')\n\twindow.localStorage.setItem('theme', 'dark')\n\tdocument.getElementById('theme-toggle').innerHTML = 'Light Mode'\n} else {\n\tdocument.documentElement.setAttribute('data-theme', 'light')\n\twindow.localStorage.setItem('theme', 'light')\n\tdocument.getElementById('theme-toggle').innerHTML = 'Dark Mode'\n}\n\nfunction modeSwitcher() {\n\tlet currentMode = document.documentElement.getAttribute('data-theme')\n\tif (currentMode === 'dark') {\n\t\tdocument.documentElement.setAttribute('data-theme', 'light')\n\t\twindow.localStorage.setItem('theme', 'light')\n\t\tdocument.getElementById('theme-toggle').innerHTML = 'Dark Mode'\n\n\t\tvisible.classList.remove('visible')\n\t\tvisible.classList.add('invisible')\n\n\t\tinvisible.classList.remove('invisible')\n\t\tinvisible.classList.add('visible')\n\t} else {\n\t\tdocument.documentElement.setAttribute('data-theme', 'dark')\n\t\twindow.localStorage.setItem('theme', 'dark')\n\t\tdocument.getElementById('theme-toggle').innerHTML = 'Light Mode'\n\n\t\tvisible.classList.remove('invisible')\n\t\tvisible.classList.add('visible')\n\n\t\tinvisible.classList.remove('visible')\n\t\tinvisible.classList.add('invisible')\n\t}\n}\n"]}