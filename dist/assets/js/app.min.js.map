{"version":3,"sources":["app.js"],"names":["html","document","documentElement","themeButtons","querySelectorAll","forEach","button","theme","dataset","setTheme","addEventListener","window","lastTime","vendors","x","length","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","body_content","querySelector","header","nav_content","threshold","getBoundingClientRect","scrollY","top","classList","add","remove","csSelector","csInput","csList","csOptions","csStatus","aOptions","Array","from","csState","toggleList","whichWay","setAttribute","findFocus","activeElement","moveFocus","fromHere","toThere","aCurrentOptions","filter","option","style","display","focus","currentItem","whichOne","indexOf","doFilter","terms","value","aFilteredOptions","innerText","toUpperCase","startsWith","howMany","setState","textContent","makeChoice","whichOption","optionTitle","newState","e","currentFocus","tagName","navigation","nextElementSibling","scrollIntoView","block","behavior","whichKey","doKeyAction","key","target","closest","visible","invisible","localStorage","getItem","userPrefers","getComputedStyle","getPropertyValue","modeSwitcher","getAttribute","setItem","getElementById","innerHTML"],"mappings":"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","file":"app.min.js","sourcesContent":["\nconst html = document.documentElement\nconst themeButtons = document.querySelectorAll('[data-set-theme]');\n\nthemeButtons.forEach((button) => {\n  const theme = button.dataset.setTheme;\n\n  button.addEventListener('click', () => {\n    html.dataset.theme = theme;\n  })\n})\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n(function (window, document) {\n  (function () {\n    let lastTime = 0;\n    const vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      window.requestAnimationFrame = window[`${vendors[x]}RequestAnimationFrame`];\n      window.cancelAnimationFrame = window[`${vendors[x]}CancelAnimationFrame`]\n        || window[`${vendors[x]}CancelRequestAnimationFrame`];\n    }\n    if (!window.requestAnimationFrame) {\n      window.requestAnimationFrame = function (callback, element) {\n        const currTime = new Date().getTime();\n        const timeToCall = Math.max(0, 16 - (currTime - lastTime));\n        const id = window.setTimeout(() => {\n          callback(currTime + timeToCall);\n        }, timeToCall);\n        lastTime = currTime + timeToCall;\n        return id;\n      };\n    }\n\n    if (!window.cancelAnimationFrame) {\n      window.cancelAnimationFrame = function (id) {\n        clearTimeout(id);\n      };\n    }\n  }());\n\n  const elements = document.querySelectorAll('.sticky-content');\n  // Stickyfill.add(elements)\n\n  const body_content = document.querySelector('.site-content');\n  const header = document.querySelector('header');\n  const nav_content = document.querySelector('.navigation');\n  if (\n    typeof body_content !== 'undefined'\n    && body_content != null\n    && typeof header !== 'undefined'\n    && header != null\n    && typeof nav_content !== 'undefined'\n    && nav_content != null\n  ) {\n    const threshold = nav_content.getBoundingClientRect();\n\n    window.addEventListener('scroll', () => {\n      if (window.scrollY >= threshold.top) {\n        // header.classList.add('header--fixed');\n        nav_content.classList.add('--fixed');\n      } else {\n        // header.classList.remove('header--fixed');\n        nav_content.classList.remove('--fixed');\n      }\n    });\n  }\n\n  function scrollToHalf(duration) {\n    const heightDiff = document.body.scrollHeight - window.innerHeight;\n    const endValue = heightDiff / 2;\n    let start = null;\n\n    /* Set a default for the duration, in case it's not given. */\n    duration = duration || 300;\n\n    /* Start the animation. */\n    window.requestAnimationFrame(function step(now) {\n      /* Normalise the start date and calculate the current progress. */\n      start = !start ? now : start;\n      const progress = now - start;\n\n      /* Increment by a calculate step the value of the scroll top. */\n      document.documentElement.scrollTop = (endValue * progress) / duration;\n      document.body.scrollTop = (endValue * progress) / duration;\n\n      /* Check whether the current progress is less than the given duration. */\n      if (progress < duration) {\n        /* Execute the function recursively. */\n        window.requestAnimationFrame(step);\n      } else {\n        /* Set the scroll top to the end value. */\n        document.documentElement.scrollTop = endValue;\n        document.body.scrollTop = endValue;\n      }\n    });\n  }\n\n  function scrollToSection(element) {\n    /* Scroll until the button's next sibling comes into view. */\n    element.nextElementSibling.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  // SETUP\n  // /////////////////////////////////\n  // assign names to things we'll need to use more than once\n  const csScroll = nav_content.getBoundingClientRect();\n  const csSelector = document.querySelector('#myCustomSelect'); // the input, svg and ul as a group\n  const csInput = csSelector.querySelector('input');\n  const csList = csSelector.querySelector('ul');\n  const csOptions = csList.querySelectorAll('li');\n  const csIcons = csSelector.querySelectorAll('svg');\n  const csStatus = document.querySelector('#custom-select-status');\n  const aOptions = Array.from(csOptions);\n\n  // when JS is loaded, set up our starting point\n  // if JS fails to load, the custom select remains a plain text input\n  // create and set start point for the state tracker\n  let csState = 'initial';\n  // inform assistive tech (screen readers) of the names & roles of the elements in our group\n  csSelector.setAttribute('role', 'combobox');\n  csSelector.setAttribute('aria-haspopup', 'listbox');\n  csSelector.setAttribute('aria-owns', 'custom-select-list'); // container owns the list...\n  csInput.setAttribute('aria-autocomplete', 'both');\n  csInput.setAttribute('aria-controls', 'custom-select-list'); // ...but the input controls it\n  csList.setAttribute('role', 'listbox');\n  csOptions.forEach((option) => {\n    option.setAttribute('role', 'option');\n    option.setAttribute('tabindex', '-1'); // make li elements keyboard focusable by script only\n  });\n  // set up a message to keep screen reader users informed of what the custom input is for/doing\n  csStatus.textContent = `${csOptions.length} options available. Arrow down to browse or start typing to filter.`;\n\n  // EVENTS\n  // /////////////////////////////////\n  csSelector.addEventListener('click', (e) => {\n    const currentFocus = findFocus();\n\n    switch (csState) {\n      case 'initial': // if state = initial, toggleOpen and set state to opened\n        toggleList('Open');\n        setState('opened');\n        break;\n      case 'opened':\n        // if state = opened and focus on input, toggleShut and set state to initial\n        if (currentFocus === csInput) {\n          toggleList('Shut');\n          setState('initial');\n        } else if (currentFocus.tagName === 'LI') {\n          // if state = opened and focus on list, makeChoice, toggleShut and set state to closed\n          makeChoice(currentFocus);\n          toggleList('Shut');\n          setState('closed');\n        }\n        break;\n      case 'filtered':\n        // if state = filtered and focus on list, makeChoice and set state to closed\n        if (currentFocus.tagName === 'LI') {\n          makeChoice(currentFocus);\n          toggleList('Shut');\n          setState('closed');\n        } // if state = filtered and focus on input, do nothing (wait for next user input)\n\n        break;\n      case 'closed': // if state = closed, toggleOpen and set state to filtered? or opened?\n        toggleList('Open');\n        setState('filtered');\n        break;\n    }\n\n    scrollToSection(navigation);\n  });\n\n  csSelector.addEventListener('keyup', (e) => {\n    doKeyAction(e.key);\n  });\n\n  document.addEventListener('click', (e) => {\n    if (!e.target.closest('#myCustomSelect')) {\n      // click outside of the custom group\n      toggleList('Shut');\n      setState('initial');\n    }\n  });\n\n  // FUNCTIONS\n  // /////////////////////////////////\n\n  function toggleList(whichWay) {\n    if (whichWay === 'Open') {\n      csList.classList.remove('hidden-all');\n      csSelector.setAttribute('aria-expanded', 'true');\n    } else {\n      // === 'Shut'\n      csList.classList.add('hidden-all');\n      csSelector.setAttribute('aria-expanded', 'false');\n    }\n  }\n\n  function findFocus() {\n    const focusPoint = document.activeElement;\n    return focusPoint;\n  }\n\n  function moveFocus(fromHere, toThere) {\n    // grab the currently showing options, which might have been filtered\n    const aCurrentOptions = aOptions.filter((option) => {\n      if (option.style.display === '') {\n        return true;\n      }\n    });\n    // don't move if all options have been filtered out\n    if (aCurrentOptions.length === 0) {\n      return;\n    }\n    if (toThere === 'input') {\n      csInput.focus();\n    }\n    // possible start points\n    switch (fromHere) {\n      case csInput:\n        if (toThere === 'forward') {\n          aCurrentOptions[0].focus();\n        } else if (toThere === 'back') {\n          aCurrentOptions[aCurrentOptions.length - 1].focus();\n        }\n        break;\n      case csOptions[0]:\n        if (toThere === 'forward') {\n          aCurrentOptions[1].focus();\n        } else if (toThere === 'back') {\n          csInput.focus();\n        }\n        break;\n      case csOptions[csOptions.length - 1]:\n        if (toThere === 'forward') {\n          aCurrentOptions[0].focus();\n        } else if (toThere === 'back') {\n          aCurrentOptions[aCurrentOptions.length - 2].focus();\n        }\n        break;\n      default:\n        // middle list or filtered items\n        const currentItem = findFocus();\n        const whichOne = aCurrentOptions.indexOf(currentItem);\n        if (toThere === 'forward') {\n          const nextOne = aCurrentOptions[whichOne + 1];\n          nextOne.focus();\n        } else if (toThere === 'back' && whichOne > 0) {\n          const previousOne = aCurrentOptions[whichOne - 1];\n          previousOne.focus();\n        } else {\n          // if whichOne = 0\n          csInput.focus();\n        }\n        break;\n    }\n  }\n\n  function doFilter() {\n    const terms = csInput.value;\n    const aFilteredOptions = aOptions.filter((option) => {\n      if (option.innerText.toUpperCase().startsWith(terms.toUpperCase())) {\n        return true;\n      }\n    });\n    csOptions.forEach((option) => (option.style.display = 'none'));\n    aFilteredOptions.forEach((option) => {\n      option.style.display = '';\n    });\n    setState('filtered');\n    updateStatus(aFilteredOptions.length);\n  }\n\n  function updateStatus(howMany) {\n    csStatus.textContent = `${howMany} options available.`;\n  }\n\n  function makeChoice(whichOption) {\n    const optionTitle = whichOption.querySelector('strong');\n    csInput.value = optionTitle.textContent;\n    moveFocus(document.activeElement, 'input');\n    // update aria-selected, if using\n  }\n\n  function setState(newState) {\n    switch (newState) {\n      case 'initial':\n        csState = 'initial';\n        break;\n      case 'opened':\n        csState = 'opened';\n        break;\n      case 'filtered':\n        csState = 'filtered';\n        break;\n      case 'closed':\n        csState = 'closed';\n    }\n    // console.log({csState})\n  }\n\n  function doKeyAction(whichKey) {\n    const currentFocus = findFocus();\n    switch (whichKey) {\n      case 'Enter':\n        if (csState === 'initial') {\n          // if state = initial, toggleOpen and set state to opened\n          toggleList('Open');\n          setState('opened');\n        } else if (csState === 'opened' && currentFocus.tagName === 'LI') {\n          // if state = opened and focus on list, makeChoice and set state to closed\n          makeChoice(currentFocus);\n          toggleList('Shut');\n          setState('closed');\n        } else if (csState === 'opened' && currentFocus === csInput) {\n          // if state = opened and focus on input, close it\n          toggleList('Shut');\n          setState('closed');\n        } else if (csState === 'filtered' && currentFocus.tagName === 'LI') {\n          // if state = filtered and focus on list, makeChoice and set state to closed\n          makeChoice(currentFocus);\n          toggleList('Shut');\n          setState('closed');\n        } else if (csState === 'filtered' && currentFocus === csInput) {\n          // if state = filtered and focus on input, set state to opened\n          toggleList('Open');\n          setState('opened');\n        } else {\n          // i.e. csState is closed, or csState is opened/filtered but other focus point?\n          // if state = closed, set state to filtered? i.e. open but keep existing input?\n          toggleList('Open');\n          setState('filtered');\n        }\n        break;\n\n      case 'Escape':\n        // if state = initial, do nothing\n        // if state = opened or filtered, set state to initial\n        // if state = closed, do nothing\n        if (csState === 'opened' || csState === 'filtered') {\n          toggleList('Shut');\n          setState('initial');\n        }\n        break;\n\n      case 'ArrowDown':\n        if (csState === 'initial' || csState === 'closed') {\n          // if state = initial or closed, set state to opened and moveFocus to first\n          toggleList('Open');\n          moveFocus(csInput, 'forward');\n          setState('opened');\n        } else {\n          // if state = opened and focus on input, moveFocus to first\n          // if state = opened and focus on list, moveFocus to next/first\n          // if state = filtered and focus on input, moveFocus to first\n          // if state = filtered and focus on list, moveFocus to next/first\n          toggleList('Open');\n          moveFocus(currentFocus, 'forward');\n        }\n        break;\n      case 'ArrowUp':\n        if (csState === 'initial' || csState === 'closed') {\n          // if state = initial, set state to opened and moveFocus to last\n          // if state = closed, set state to opened and moveFocus to last\n          toggleList('Open');\n          moveFocus(csInput, 'back');\n          setState('opened');\n        } else {\n          // if state = opened and focus on input, moveFocus to last\n          // if state = opened and focus on list, moveFocus to prev/last\n          // if state = filtered and focus on input, moveFocus to last\n          // if state = filtered and focus on list, moveFocus to prev/last\n          moveFocus(currentFocus, 'back');\n        }\n        break;\n      default:\n        if (csState === 'initial') {\n          // if state = initial, toggle open, doFilter and set state to filtered\n          toggleList('Open');\n          doFilter();\n          setState('filtered');\n        } else if (csState === 'opened') {\n          // if state = opened, doFilter and set state to filtered\n          doFilter();\n          setState('filtered');\n        } else if (csState === 'closed') {\n          // if state = closed, doFilter and set state to filtered\n          doFilter();\n          setState('filtered');\n        } else {\n          // already filtered\n          doFilter();\n        }\n        break;\n    }\n  }\n}(window, document));\n\nconst visible = document.querySelector('.visible');\nconst invisible = document.querySelector('.invisible');\n\nconst theme = localStorage.getItem('theme');\nif (theme === 'dark') {\n  document.documentElement.setAttribute('data-theme', 'dark');\n}\n\nconst userPrefers = getComputedStyle(document.documentElement).getPropertyValue(\n  'content',\n);\n\nif (theme === 'dark') {\n  document.getElementById('theme-toggle').innerHTML = 'Light Mode';\n} else if (theme === 'light') {\n  document.getElementById('theme-toggle').innerHTML = 'Dark Mode';\n} else if (userPrefers === 'dark') {\n  document.documentElement.setAttribute('data-theme', 'dark');\n  window.localStorage.setItem('theme', 'dark');\n  document.getElementById('theme-toggle').innerHTML = 'Light Mode';\n} else {\n  document.documentElement.setAttribute('data-theme', 'light');\n  window.localStorage.setItem('theme', 'light');\n  document.getElementById('theme-toggle').innerHTML = 'Dark Mode';\n}\n\nfunction modeSwitcher() {\n  const currentMode = document.documentElement.getAttribute('data-theme');\n  if (currentMode === 'dark') {\n    document.documentElement.setAttribute('data-theme', 'light');\n    window.localStorage.setItem('theme', 'light');\n    document.getElementById('theme-toggle').innerHTML = 'Dark Mode';\n\n    visible.classList.remove('visible');\n    visible.classList.add('invisible');\n\n    invisible.classList.remove('invisible');\n    invisible.classList.add('visible');\n  } else {\n    document.documentElement.setAttribute('data-theme', 'dark');\n    window.localStorage.setItem('theme', 'dark');\n    document.getElementById('theme-toggle').innerHTML = 'Light Mode';\n\n    visible.classList.remove('invisible');\n    visible.classList.add('visible');\n\n    invisible.classList.remove('visible');\n    invisible.classList.add('invisible');\n  }\n}\n"]}